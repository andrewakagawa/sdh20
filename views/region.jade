extends layout

block content
    script(src='http://d3js.org/d3.v3.min.js')
    script(src='http://code.jquery.com/jquery.js')
    script(src='/lib/bootstrap/bootstrap.min.js')
    include includes/mainmenu.jade
    .container
      h1 #{title} Health Stats
      .row-fluid
        .span12
         .span10.offset1     
          iframe(width='800', height='450', frameborder='0', scrolling='no', marginheight='0', marginwidth='0', src='http://dianaeg2014.maps.arcgis.com/home/webmap/templates/OnePane/basicviewer/embed.html?webmap=943a54276f964eb5abd3a92cf8af50c2&gcsextent=-117.4808,32.4762,-116.6376,32.8421&displayslider=true&displayscalebar=true&displaylegend=true&displaydetails=true&displaybasemaps=true')

        .row-fluid
          .span12
              h2 How #{title} stacks up
              ul.nav.nav-tabs
                li
                  a(href='#item7', data-toggle='tab') Deaths
                li
                  a(href='#item8', data-toggle='tab') Hospitalizations
                li
                  a(href='#item9', data-toggle='tab') Emergency
              .tab-content
                #item7.tab-pane.active
                  //
                    Div that will hold the chart
                  #chart_div7
                    label
                      input(type='checkbox' value='a')
                      | Sort values

                    script.
                     (function () {
                     var margin = {top: 20, right: 20, bottom: 30, left: 40},
                     width = 1170 - margin.left - margin.right,
                     height = 600 - margin.top - margin.bottom;

                     var x = d3.scale.ordinal()
                       .rangeRoundBands([0, width], .1, 1);

                     var y = d3.scale.linear()
                       .range([height, 0]);

                     var xAxis = d3.svg.axis()
                       .scale(x)
                       .orient("bottom");

                     var yAxis = d3.svg.axis()
                       .scale(y)
                       .orient("left")

                     var svg = d3.select("#chart_div7").append("svg")
                       .attr("width", width + margin.left + margin.right)
                       .attr("height", height + margin.top + margin.bottom)
                       .append("g")
                       .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                     d3.csv("csv/data.csv", function(error, data) {
                       data.forEach(function(d) {
                         d.deathrate = +d.deathrate;
                         });

                       x.domain(data.map(function(d) { return d.SRA; }));
                       y.domain([0, d3.max(data, function(d) { return d.deathrate; })]);

                       svg.selectAll(".bar")
                         .data(data)
                         .enter().append("rect")
                         .attr("class", "bar")
                         .attr("x", function(d) { return x(d.SRA); })
                         .attr("width", x.rangeBand())
                         .attr("y", function(d) { return y(d.deathrate); })
                         .attr("height", function(d) { return height - y(d.deathrate); });

                       svg.append("g")
                         .attr("class", "x axis")
                         .attr("transform", "translate(-12," + height + ")")
                         .call(xAxis)
                         .selectAll("text")
                         .style("text-anchor", "start")
                         .attr("transform", function(d) {
                           return "rotate(-90)"})
                         .attr("dx", "5px");

                       svg.append("g")
                         .attr("class", "y axis")
                         .call(yAxis)
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 6)
                         .attr("dy", "10")
                         .style("text-anchor", "end")
                         .text("in thousands");

                       d3.select("input[value=\"a\"]").on("change", change);

                       var sortTimeout = setTimeout(function() {
                         d3.select("input[value=\"a\"]").property("checked", true).each(change);
                       }, 2000);

                       function change() {
                         clearTimeout(sortTimeout);

                         // Copy-on-write since tweens are evaluated after a delay.
                         var x0 = x.domain(data.sort(this.checked
                           ? function(a, b) { return b.deathrate - a.deathrate; }
                           : function(a, b) { return d3.ascending(a.SRA, b.SRA); })
                           .map(function(d) { return d.SRA; }))
                           .copy();

                         var transition = svg.transition().duration(750),
                         delay = function(d, i) { return i * 50; };
                         transition.selectAll(".bar")
                           .delay(delay)
                           .attr("x", function(d) { return x0(d.SRA); });
                         transition.select(".x.axis")
                           .call(xAxis)
                           .selectAll("text")
                           .style("text-anchor", "start")
                           .selectAll("g")
                           .delay(delay);
                       }
                     });
                     }());



                #item8.tab-pane
                  //
                    Div that will hold the chart
                  #chart_div8
                    label
                      input(type='checkbox' value='b' onclick='loadB()')
                      | Sort values

                    script.
                     (loadB = function() {
                     var margin = {top: 20, right: 20, bottom: 30, left: 40},
                     width = 1170 - margin.left - margin.right,
                     height = 600 - margin.top - margin.bottom;

                     var x = d3.scale.ordinal()
                       .rangeRoundBands([0, width], .1, 1);

                     var y = d3.scale.linear()
                       .range([height, 0]);

                     var xAxis = d3.svg.axis()
                       .scale(x)
                       .orient("bottom");

                     var yAxis = d3.svg.axis()
                       .scale(y)
                       .orient("left")

                     var svg = d3.select("#chart_div8").append("svg")
                       .attr("width", width + margin.left + margin.right)
                       .attr("height", height + margin.top + margin.bottom)
                       .append("g")
                       .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                     d3.csv("csv/data.csv", function(error, data) {
                       data.forEach(function(d) {
                           d.hospitalrate = +d.hospitalrate;
                         });

                       x.domain(data.map(function(d) { return d.SRA; }));
                       y.domain([0, d3.max(data, function(d) { return d.hospitalrate; })]);

                       svg.selectAll(".bar")
                         .data(data)
                         .enter().append("rect")
                         .attr("class", "bar")
                         .attr("x", function(d) { return x(d.SRA); })
                         .attr("width", x.rangeBand())
                         .attr("y", function(d) { return y(d.hospitalrate); })
                         .attr("height", function(d) { return height - y(d.hospitalrate); });

                       svg.append("g")
                         .attr("class", "x axis")
                         .attr("transform", "translate(-12," + height + ")")
                         .call(xAxis)
                         .selectAll("text")
                         .style("text-anchor", "start")
                         .attr("transform", function(d) {
                           return "rotate(-90)"})
                         .attr("dx", "5px");

                       svg.append("g")
                         .attr("class", "y axis")
                         .call(yAxis)
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 6)
                         .attr("dy", "10")
                         .style("text-anchor", "end")
                         .text("in thousands");

                       d3.select("input[value=\"b\"]").on("change", change);

                       var sortTimeout = setTimeout(function() {
                         d3.select("input[value=\"b\"]").property("checked", true).each(change);
                       }, 2000);

                       function change() {
                         clearTimeout(sortTimeout);

                         // Copy-on-write since tweens are evaluated after a delay.
                         var x0 = x.domain(data.sort(this.checked
                           ? function(a, b) { return b.hospitalrate - a.hospitalrate; }
                           : function(a, b) { return d3.ascending(a.SRA, b.SRA); })
                           .map(function(d) { return d.SRA; }))
                           .copy();

                         var transition = svg.transition().duration(750),
                         delay = function(d, i) { return i * 50; };
                         transition.selectAll(".bar")
                           .delay(delay)
                           .attr("x", function(d) { return x0(d.SRA); });
                         transition.select(".x.axis")
                           .call(xAxis)
                           .selectAll("text")
                           .style("text-anchor", "start")
                           .selectAll("g")
                           .delay(delay);
                       }
                     });
                     }());

 
                #item9.tab-pane
                  //
                    Div that will hold the chart
                  #chart_div9
                    label
                      input(type='checkbox' value='c')
                      | Sort values

                    script.
                     (function() {
                     var margin = {top: 20, right: 20, bottom: 30, left: 40},
                     width = 1170 - margin.left - margin.right,
                     height = 600 - margin.top - margin.bottom;

                     var x = d3.scale.ordinal()
                       .rangeRoundBands([0, width], .1, 1);

                     var y = d3.scale.linear()
                       .range([height, 0]);

                     var xAxis = d3.svg.axis()
                       .scale(x)
                       .orient("bottom");

                     var yAxis = d3.svg.axis()
                       .scale(y)
                       .orient("left")

                     var svg = d3.select("#chart_div9").append("svg")
                       .attr("width", width + margin.left + margin.right)
                       .attr("height", height + margin.top + margin.bottom)
                       .append("g")
                       .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                     d3.csv("csv/data.csv", function(error, data) {
                       data.forEach(function(d) {
                         d.edrate = +d.edrate;
                         });

                       x.domain(data.map(function(d) { return d.SRA; }));
                       y.domain([0, d3.max(data, function(d) { return d.edrate; })]);

                       svg.selectAll(".bar")
                         .data(data)
                         .enter().append("rect")
                         .attr("class", "bar")
                         .attr("x", function(d) { return x(d.SRA); })
                         .attr("width", x.rangeBand())
                         .attr("y", function(d) { return y(d.edrate); })
                         .attr("height", function(d) { return height - y(d.edrate); });

                       svg.append("g")
                         .attr("class", "x axis")
                         .attr("transform", "translate(-12," + height + ")")
                         .call(xAxis)
                         .selectAll("text")
                         .style("text-anchor", "start")
                         .attr("transform", function(d) {
                           return "rotate(-90)"})
                         .attr("dx", "5px");

                       svg.append("g")
                         .attr("class", "y axis")
                         .call(yAxis)
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 6)
                         .attr("dy", "10")
                         .style("text-anchor", "end")
                         .text("in thousands");

                       d3.select("input[value=\"c\"]").on("change", change);

                       var sortTimeout = setTimeout(function() {
                         d3.select("input[value=\"c\"]").property("checked", true).each(change);
                       }, 2000);

                       function change() {
                         clearTimeout(sortTimeout);

                         // Copy-on-write since tweens are evaluated after a delay.
                         var x0 = x.domain(data.sort(this.checked
                           ? function(a, b) { return b.edrate - a.edrate; }
                           : function(a, b) { return d3.ascending(a.SRA, b.SRA); })
                           .map(function(d) { return d.SRA; }))
                           .copy();

                         var transition = svg.transition().duration(750),
                         delay = function(d, i) { return i * 50; };
                         transition.selectAll(".bar")
                           .delay(delay)
                           .attr("x", function(d) { return x0(d.SRA); });
                         transition.select(".x.axis")
                           .call(xAxis)
                           .selectAll("text")
                           .style("text-anchor", "start")
                           .selectAll("g")
                           .delay(delay);
                       }
                     });
                     }());


        p.caption
          | COPD = Chronic obstructive pulmonary disease, which includes chronic bronchitis and emphysema.

        .row-fluid
          .span10.offset1
            h2 What's making #{title} unhealthy
            ul.nav.nav-tabs
              li
                a(href='#item1', data-toggle='tab') Deaths
              li
                a(href='#item2', data-toggle='tab') Hospitalizations
              li
                a(href='#item3', data-toggle='tab') Emergency
            .tab-content
              #item1.tab-pane.active
                //
                  Div that will hold the chart
                #chart_div
                  script.
                    (function() {
                      var dispatch = d3.dispatch("load", "statechange");
                      var groups = [
                        "d-heartdisease",
                        "d-stroke",
                        "d-asthma",
                        "d-pulminarydisease",
                        "d-diabetes",
                        "d-cancer"
                      ];
                      d3.csv("csv/data.csv", type, function(error, states) {
                      if (error) throw error;
                      var stateById = d3.map();
                      states.forEach(function(d) { stateById.set(d.SRA, d); });
                      dispatch.load(stateById);
                      dispatch.statechange(stateById.get(!{JSON.stringify(title)}));
                    });

                    // A drop-down menu for selecting a state; uses the "menu" namespace.
                    dispatch.on("load.menu", function(stateById) {
                    
                      var select = d3.select("#chart_div")
                        .append("div")
                        .append("select")
                        .on("change", function() { dispatch.statechange(stateById.get(this.value)); });
                    
                      select.selectAll("option")
                        .data(stateById.values())
                        .enter().append("option")
                        .attr("value", function(d) { return d.SRA; })
                        .text(function(d) { return d.SRA; });
                    
                      dispatch.on("statechange.menu", function(state) {
                      select.property("value", state.SRA);
                    });
                    });

                    // A bar chart to show total population; uses the "bar" namespace.
                    dispatch.on("load.bar", function(stateById) {
                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                    width = 80 - margin.left - margin.right,
                    height = 460 - margin.top - margin.bottom;
       
                    var y = d3.scale.linear()
                      .domain([0, d3.max(stateById.values(), function(d) { return d.total; })])
                      .rangeRound([height, 0])
                      .nice();

                    var yAxis = d3.svg.axis()
                      .scale(y)
                      .orient("left")
                      .tickFormat(d3.format(".2s"));
                    
                    var svg = d3.select("#chart_div").append("svg")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                    
                    svg.append("g")
                      .attr("class", "y axis")
                      .call(yAxis);
                    
                    var rect = svg.append("rect")
                      .attr("x", 4)
                      .attr("width", width - 4)
                      .attr("y", height)
                      .attr("height", 0)
                      .style("fill", "#aaa");

                    dispatch.on("statechange.bar", function(d) {
                      rect.transition()
                        .attr("y", y(d.total))
                        .attr("height", y(0) - y(d.total));
                    });
                    });
                    
                    // A pie chart to show population by age group; uses the "pie" namespace.
                    dispatch.on("load.pie", function(stateById) {
                    var width = 880,
                    height = 460,
                    radius = Math.min(width, height) / 2;

                    var color = d3.scale.ordinal()
                      .domain(groups)
                      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#ff8c00"]);
                    
                    var arc = d3.svg.arc()
                      .outerRadius(radius - 10)
                      .innerRadius(radius - 70);
                    var pie = d3.layout.pie()
                      .sort(null);
         
                    var svg = d3.select("#chart_div").append("svg")
                      .attr("width", width)
                      .attr("height", height)
                      .append("g")
                      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                    var path = svg.selectAll("path")
                      .data(groups)
                      .enter().append("path")
                      .style("fill", color)
                      .attr("id", function(d,i){return "s"+i;})
                      .each(function() { this._current = {startAngle: 0, endAngle: 0}; });

                    var label = svg.selectAll("text")
                      .data(groups)
                      .enter().append("text")
                      .append("textPath")
                      .attr("xlink:href",function(d,i){return "#s"+i;})
                      .text(function(d, i){
                        var labels = ["Heart Disease", "Stroke", "Asthma", "Pulminary Disease", "Diabedes", "cancer"];
                        return labels[i];
                      })

                    dispatch.on("statechange.pie", function(d) {
                    path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
                    .attrTween("d", function(d) {
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                    return arc(interpolate(t));
                    };
                    });
                    });
                    });
                    // Coerce population counts to numbers and compute total per state.
                    function type(d) {
                    d.total = d3.sum(groups, function(k) { return d[k] = +d[k]; });
                    return d;
                    }
                    }());




              #item2.tab-pane
                //
                  Div that will hold the chart
                #chart_div2
                  script.
                    (function() {
                    var dispatch = d3.dispatch("load", "statechange");
                    var groups = [
                    "h-heartdisease",
                    "h-stroke",
                    "h-asthma",
                    "h-pulminarydisease",
                    "h-diabetes",
                    ];
                    d3.csv("csv/data.csv", type, function(error, states) {
                    if (error) throw error;
                    var stateById = d3.map();
                    states.forEach(function(d) { stateById.set(d.SRA, d); });
                    dispatch.load(stateById);
                    dispatch.statechange(stateById.get(!{JSON.stringify(title)}));
                    });


                    // A drop-down menu for selecting a state; uses the "menu" namespace.
                    dispatch.on("load.menu", function(stateById) {
                    var select = d3.select("#chart_div2")
                    .append("div")
                    .append("select")
                    .on("change", function() { dispatch.statechange(stateById.get(this.value)); });
                    select.selectAll("option")
                    .data(stateById.values())
                    .enter().append("option")
                    .attr("value", function(d) { return d.SRA; })
                    .text(function(d) { return d.SRA; });
                    dispatch.on("statechange.menu", function(state) {
                    select.property("value", state.SRA);
                    });
                    });


                    // A bar chart to show total population; uses the "bar" namespace.
                    dispatch.on("load.bar", function(stateById) {
                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                    width = 80 - margin.left - margin.right,
                    height = 460 - margin.top - margin.bottom;
                    var y = d3.scale.linear()
                    .domain([0, d3.max(stateById.values(), function(d) { return d.total; })])
                    .rangeRound([height, 0])
                    .nice();
                    var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left")
                    .tickFormat(d3.format(".2s"));
                    var svg = d3.select("#chart_div2").append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                    svg.append("g")
                    .attr("class", "y axis")
                    .call(yAxis);
                    var rect = svg.append("rect")
                    .attr("x", 4)
                    .attr("width", width - 4)
                    .attr("y", height)
                    .attr("height", 0)
                    .style("fill", "#aaa");
                    dispatch.on("statechange.bar", function(d) {
                    rect.transition()
                    .attr("y", y(d.total))
                    .attr("height", y(0) - y(d.total));
                    });
                    });

                    // A pie chart to show population by age group; uses the "pie" namespace.
                    dispatch.on("load.pie", function(stateById) {
                    var width = 880,
                    height = 460,
                    radius = Math.min(width, height) / 2;
                    var color = d3.scale.ordinal()
                    .domain(groups)
                    .range(["#98ABC5", "#8a89a6", "#7b6888", "#6b486b", "#ff8c00"]);
                    var arc = d3.svg.arc()
                    .outerRadius(radius - 10)
                    .innerRadius(radius - 70);
                    var pie = d3.layout.pie()
                    .sort(null);

                    var svg = d3.select("#chart_div2").append("svg")
                      .attr("width", width)
                      .attr("height", height)
                      .append("g")
                      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                    var path = svg.selectAll("path")
                      .data(groups)
                      .enter().append("path")
                      .style("fill", color)
                      .attr("id", function(d,i){return "s"+i;})
                      .each(function() { this._current = {startAngle: 0, endAngle: 0}; });

                    var label = svg.selectAll("text")
                      .data(groups)
                      .enter().append("text")
                      .append("textPath")
                      .attr("xlink:href",function(d,i){return "#s"+i;})
                      .text(function(d, i){
                        var labels = ["Heart Disease", "Stroke", "Asthma", "Pulminary Disease", "Diabedes"];
                        return labels[i];
                      })

                    dispatch.on("statechange.pie", function(d) {
                    path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
                    .attrTween("d", function(d) {
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                    return arc(interpolate(t));
                    };
                    });
                    });
                    });

                    // Coerce population counts to numbers and compute total per state.
                    function type(d) {
                    d.total = d3.sum(groups, function(k) { return d[k] = +d[k]; });
                    return d;
                    }
                    }());




              #item3.tab-pane
                //
                  Div that will hold the chart
                #chart_div3
                  script.
                    (function() {
                    var dispatch = d3.dispatch("load", "statechange");
                    var groups = [
                    "e-heartdisease",
                    "e-stroke",
                    "e-asthma",
                    "e-pulminarydisease",
                    "e-diabetes",
                    ];
                    d3.csv("csv/data.csv", type, function(error, states) {
                    if (error) throw error;
                    var stateById = d3.map();
                    states.forEach(function(d) { stateById.set(d.SRA, d); });
                    dispatch.load(stateById);
                    dispatch.statechange(stateById.get(!{JSON.stringify(title)}));
                    });

                    // A drop-down menu for selecting a state; uses the "menu" namespace.
                    dispatch.on("load.menu", function(stateById) {
                    var select = d3.select("#chart_div3")
                    .append("div")
                    .append("select")
                    .on("change", function() { dispatch.statechange(stateById.get(this.value)); });
                    select.selectAll("option")
                    .data(stateById.values())
                    .enter().append("option")
                    .attr("value", function(d) { return d.SRA; })
                    .text(function(d) { return d.SRA; });
                    dispatch.on("statechange.menu", function(state) {
                    select.property("value", state.SRA);
                    });
                    });

                    // A bar chart to show total population; uses the "bar" namespace.
                    dispatch.on("load.bar", function(stateById) {
                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                    width = 80 - margin.left - margin.right,
                    height = 460 - margin.top - margin.bottom;
                    var y = d3.scale.linear()
                    .domain([0, d3.max(stateById.values(), function(d) { return d.total; })])
                    .rangeRound([height, 0])
                    .nice();
                    var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left")
                    .tickFormat(d3.format(".2s"));
                    var svg = d3.select("#chart_div3").append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                    svg.append("g")
                    .attr("class", "y axis")
                    .call(yAxis);
                    var rect = svg.append("rect")
                    .attr("x", 4)
                    .attr("width", width - 4)
                    .attr("y", height)
                    .attr("height", 0)
                    .style("fill", "#aaa");
                    dispatch.on("statechange.bar", function(d) {
                    rect.transition()
                    .attr("y", y(d.total))
                    .attr("height", y(0) - y(d.total));
                    });
                    });

                    // A pie chart to show population by age group; uses the "pie" namespace.
                    dispatch.on("load.pie", function(stateById) {
                    var width = 880,
                    height = 460,
                    radius = Math.min(width, height) / 2;
                    var color = d3.scale.ordinal()
                      .domain(groups)
                      .range(["#98ABC5", "#8a89a6", "#7b6888", "#6b486b", "#ff8c00"]);
                    var arc = d3.svg.arc()
                      .outerRadius(radius - 10)
                      .innerRadius(radius - 70);
                    var pie = d3.layout.pie()
                      .sort(null);

                    var svg = d3.select("#chart_div3").append("svg")
                      .attr("width", width)
                      .attr("height", height)
                      .append("g")
                      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                    var path = svg.selectAll("path")
                      .data(groups)
                      .enter().append("path")
                      .style("fill", color)
                      .attr("id", function(d,i){return "s"+i;})
                      .each(function() { this._current = {startAngle: 0, endAngle: 0}; });

                    var label = svg.selectAll("text")
                      .data(groups)
                      .enter().append("text")
                      .append("textPath")
                      .attr("xlink:href",function(d,i){return "#s"+i;})
                      .text(function(d, i){ 
                        var labels = ["Heart Disease", "Stroke", "Asthma", "Pulminary Disease", "Diabedes"];
                        return labels[i];
                      })

                    dispatch.on("statechange.pie", function(d) {
                      path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
                        .attrTween("d", function(d) {
                      var interpolate = d3.interpolate(this._current, d);
                      this._current = interpolate(0);
                      return function(t) {
                        return arc(interpolate(t));
                      };
                    });
                    });
                    });

                    // Coerce population counts to numbers and compute total per state.
                    function type(d) {
                    d.total = d3.sum(groups, function(k) { return d[k] = +d[k]; });
                    return d;
                    }
                    }());




        p.caption
          | COPD = Chronic obstructive pulmonary disease, which includes chronic bronchitis and emphysema.
          br
          | 2011 contributors to 3-4-50% in percentages
        .row-fluid
          .span12
            .span10.offset1
              h2 How #{title} has been doing
              ul.nav.nav-tabs
                li
                  a(href='#item4', data-toggle='tab') Deaths
                li
                  a(href='#item5', data-toggle='tab') Hospitalizations
                li
                  a(href='#item6', data-toggle='tab') Emergency
              .tab-content
                #item4.tab-pane.active
                  //
                    Div that will hold the chart
                  #chart_div4

                script.
                  (function() {

                     var margin = {top: 20, right: 80, bottom: 30, left: 50},
                     width = 960 - margin.left - margin.right,
                     height = 500 - margin.top - margin.bottom;
                     var parseDate = d3.time.format("%Y%m%d").parse;

                     var x = d3.time.scale()
                     .range([0, width]);

                     var y = d3.scale.linear()
                     .range([height, 0]);

                     var color = d3.scale.category10();

                     var xAxis = d3.svg.axis()
                     .scale(x)
                     .orient("bottom");

                     var yAxis = d3.svg.axis()
                     .scale(y)
                     .orient("left");

                     var line = d3.svg.line()
                     .interpolate("basis")
                     .x(function(d) { return x(d.date); })
                     .y(function(d) { return y(d.temperature); });

                     var svg = d3.select("#chart_div4").append("svg")
                     .attr("width", width + margin.left + margin.right)
                     .attr("height", height + margin.top + margin.bottom)
                     .append("g")
                     .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                     d3.csv("csv/dtrend.csv", function(error, data) {
                     color.domain(d3.keys(data[0]).filter(function(key) { return key !== "date"; }));
                     data.forEach(function(d) {
                     d.date = parseDate(d.date);
                     });

                     var cities = color.domain().map(function(name) {
                     return {
                     name: "dchulavista",
                     values: data.map(function(d) {
                     return {date: d.date, temperature: +d[name]};
                     })
                     };
                     });

                     x.domain(d3.extent(data, function(d) { return d.date; }));
                     y.domain([
                     d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.temperature; }); }),
                     d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.temperature; }); })
                     ]);

                     svg.append("g")
                     .attr("class", "x axis")
                     .attr("transform", "translate(0," + height + ")")
                     .call(xAxis);

                     svg.append("g")
                     .attr("class", "y axis")
                     .call(yAxis)
                     .append("text")
                     .attr("transform", "rotate(-90)")
                     .attr("y", 6)
                     .attr("dy", ".71em")
                     .style("text-anchor", "end")
                     .text("Trend");

                     var city = svg.selectAll(".city")
                     .data(cities)
                     .enter().append("g")
                     .attr("class", "city");

                     city.append("path")
                     .attr("class", "line")
                     .attr("d", function(d) { return line(d.values); })
                     .style("stroke", function(d) { return color(d.name); });

                     city.append("text")
                     .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
                     .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
                     .attr("x", 3)
                     .attr("dy", ".35em")
                     .text(function(d) { return d.name; });
                     });



                  }());


                #item5.tab-pane
                  //
                    Div that will hold the chart
                  #chart_div5
                #item6.tab-pane
                  //
                    Div that will hold the chart
                  #chart_div6
        p.caption
          | COPD = Chronic obstructive pulmonary disease, which includes chronic bronchitis and emphysema.
        .row-fluid
          .span12
            .span10.offset1
              h2 What you can do
              ul.list-unstyled.list-cta
                li
                  | Get educated
                  ul
                    li
                      | Read more about
                      a(href='http://www.cdc.gov/cancer/') cancer
                      | and
                      a(href='http://www.cdc.gov/heartdisease/')  heart disease
                li
                  | Increase your physical activity
                  ul
                    li
                      | Take more
                      a(href='http://www.sdmts.com/tripplanner.asp') public transportation
                    li
                      | Find a nearby
                      a(href='http://www.chulavistaca.gov/City_Services/Community_Services/Public_Works_Operations/Parks/default.asp') park
                      | or
                      a(href='http://www.yelp.com/search?cflt=gyms&find_loc=Chula+Vista%2C+San+Diego%2C+CA') gym
                    li
                      | Join a
                      a(href='http://www.meetup.com/find/events/fitness/?radius=50&userFreeform=Chula+Vista%2C+California%2C+USA&mcId=c91909&eventFilter=mysugg') physical activity group on Meetup.com
                li
                  | Improve your diet
                  ul
                    li
                      | Look up your closest
                      a(href='http://www.yelp.com/search?cflt=grocery&find_loc=Chula+Vista%2C+CA') supermarket
                      | or
                      a(href='http://www.ci.chula-vista.ca.us/Events/downtownFarmersMarket.asp') farmer's market
                //
                  insert sponsored logos here
                li
                  | Become an activist
                  ul
                    li Petition your local representative to support more healthy initiatives
                    address
                      strong Congressman Juan Vargas
                      br
                      | 333 F Street, Suite A
                      br
                      | Chula Vista, CA 91910
                      br
                      | Phone: 619-422-5963
                      br
                      | Fax: 619-422-7290
                      br
                      | Website:
                      a(href='https://vargas.house.gov/') https://vargas.house.gov/

