extends layout

block content
    script(src='http://d3js.org/d3.v3.min.js')
    script(src='http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js')
    script(src='http://code.jquery.com/jquery.js')
    script(src='/lib/bootstrap/bootstrap.min.js')
    include includes/mainmenu.jade
    .container
      .row-fluid
        .span12
          .span10.offset1
              h2 How #{title} stacks up
              ul.nav.nav-tabs
                li
                  a(href='#item7', data-toggle='tab') Deaths
                li
                  a(href='#item8', data-toggle='tab') Hospitalizations
                li
                  a(href='#item9', data-toggle='tab') Emergency
              .tab-content
                #item7.tab-pane.active
                  //
                    Div that will hold the chart
                  #chart_div7

                    label
                      input(type='checkbox' value='a')
                      |  Sort values

                    #graph-caption
                      |Let's tackle the most affected regions first.  Hover over and select a region for more details.

                    script.
                     (function () {
                     var margin = {top: 20, right: 20, bottom: 30, left: 40},
                     width = 971 - margin.left - margin.right,
                     height = 500 - margin.top - margin.bottom;

                     var x = d3.scale.ordinal()
                       .rangeRoundBands([0, width], .1, 1);

                     var y = d3.scale.linear()
                       .range([height, 0]);

                     var xAxis = d3.svg.axis()
                       .scale(x)
                       .orient("bottom");

                     var yAxis = d3.svg.axis()
                       .scale(y)
                       .orient("left");

                     var tip = d3.tip()
                       .attr('class','d3-tip')
                       .offset([-10,0])
                       .html(function(d) {
                          return "<strong>Total:</strong> <span='color:red'>" + d.deathrate + "</span>";
                       })

                     var svg = d3.select("#chart_div7").append("svg")
                       .attr("width", width + margin.left + margin.right)
                       .attr("height", height + margin.top + margin.bottom)
                       .append("g")
                       .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                     svg.call(tip);

                     d3.csv("csv/data.csv", type, function(error, data) {

                       x.domain(data.map(function(d) { return d.SRA; }));
                       y.domain([0, d3.max(data, function(d) { return d.deathrate; })]);

                       svg.selectAll(".bar")
                         .data(data)
                         .enter().append("a").attr("xlink:href", function(d){return d.url; })
                         .append("rect")
                         .attr("class", "bar")
                         .style ("fill", function(d) { if (d.url == !{JSON.stringify(name)}) {return "yellow";}})
                         .attr("x", function(d) { return x(d.SRA); })
                         .attr("width", x.rangeBand())
                         .attr("y", function(d) { return y(d.deathrate); })
                         .attr("height", function(d) { return height - y(d.deathrate); })
                         .on('mouseover', tip.show)
                         .on('mouseout', tip.hide)

                       svg.append("g")
                         .attr("class", "x axis")
                         .attr("transform", "translate(-12," + height + ")")
                         .call(xAxis)
                         .selectAll("text")
                         .style("text-anchor", "start")
                         .attr("transform", function(d) {
                           return "rotate(-90)"})
                         .attr("dx", "5px");

                       svg.append("g")
                         .attr("class", "y axis")
                         .call(yAxis)
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 6)
                         .attr("dy", "10")
                         .style("text-anchor", "end")
                         .text("Rate (per 100,000 of population)");

                       d3.select("input[value=\"a\"]").on("change", change);

                       var sortTimeout = setTimeout(function() {
                         d3.select("input[value=\"a\"]").property("checked", true).each(change);
                       }, 2000);

                       function change() {
                         clearTimeout(sortTimeout);

                         // Copy-on-write since tweens are evaluated after a delay.
                         var x0 = x.domain(data.sort(this.checked
                           ? function(a, b) { return b.deathrate - a.deathrate; }
                           : function(a, b) { return d3.ascending(a.SRA, b.SRA); })
                           .map(function(d) { return d.SRA; }))
                           .copy();

                         var transition = svg.transition().duration(750),
                         delay = function(d, i) { return i * 50; };
                         transition.selectAll(".bar")
                           .delay(delay)
                           .attr("x", function(d) { return x0(d.SRA); });
                         transition.select(".x.axis")
                           .call(xAxis)
                           .selectAll("text")
                           .style("text-anchor", "start")
                           .selectAll("g")
                           .delay(delay);
                       }
                     
                     });

                     function type(d) {
                      d.deathrate = +d.deathrate;
                      return d;
                     }

                     }());



                #item8.tab-pane
                  //
                    Div that will hold the chart
                  #chart_div8

                    label
                      input(type='checkbox' value='b' onclick='loadB()')
                      |  Sort values

                    #graph-caption
                      |Let's tackle the most affected regions first.  Hover over and select a region for more details.

                    script.
                     (function () {
                     var margin = {top: 20, right: 20, bottom: 30, left: 40},
                     width = 971 - margin.left - margin.right,
                     height = 500 - margin.top - margin.bottom;

                     var x = d3.scale.ordinal()
                       .rangeRoundBands([0, width], .1, 1);

                     var y = d3.scale.linear()
                       .range([height, 0]);

                     var xAxis = d3.svg.axis()
                       .scale(x)
                       .orient("bottom");

                     var yAxis = d3.svg.axis()
                       .scale(y)
                       .orient("left");

                     var tip = d3.tip()
                       .attr('class','d3-tip')
                       .offset([-10,0])
                       .html(function(d) {
                          return "<strong>Total:</strong> <span='color:red'>" + d.hospitalrate + "</span>";
                       })

                     var svg = d3.select("#chart_div8").append("svg")
                       .attr("width", width + margin.left + margin.right)
                       .attr("height", height + margin.top + margin.bottom)
                       .append("g")
                       .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                     svg.call(tip);

                     d3.csv("csv/data.csv", type, function(error, data) {

                       x.domain(data.map(function(d) { return d.SRA; }));
                       y.domain([0, d3.max(data, function(d) { return d.hospitalrate; })]);

                       svg.selectAll(".bar")
                         .data(data)
                         .enter().append("a").attr("xlink:href", function(d){return d.url; })
                         .append("rect")
                         .attr("class", "bar")
                         .style ("fill", function(d) { if (d.url == !{JSON.stringify(name)}) {return "yellow";}})
                         .attr("x", function(d) { return x(d.SRA); })
                         .attr("width", x.rangeBand())
                         .attr("y", function(d) { return y(d.hospitalrate); })
                         .attr("height", function(d) { return height - y(d.hospitalrate); })
                         .on('mouseover', tip.show)
                         .on('mouseout', tip.hide)


                       svg.append("g")
                         .attr("class", "x axis")
                         .attr("transform", "translate(-12," + height + ")")
                         .call(xAxis)
                         .selectAll("text")
                         .style("text-anchor", "start")
                         .attr("transform", function(d) {
                           return "rotate(-90)"})
                         .attr("dx", "5px");

                       svg.append("g")
                         .attr("class", "y axis")
                         .call(yAxis)
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 6)
                         .attr("dy", "10")
                         .style("text-anchor", "end")
                         .text("Rate (per 100,000 of population)");

                       d3.select("input[value=\"b\"]").on("change", change);

                       var sortTimeout = setTimeout(function() {
                         d3.select("input[value=\"b\"]").property("checked", true).each(change);
                       }, 2000);

                       function change() {
                         clearTimeout(sortTimeout);

                         // Copy-on-write since tweens are evaluated after a delay.
                         var x0 = x.domain(data.sort(this.checked
                           ? function(a, b) { return b.hospitalrate - a.hospitalrate; }
                           : function(a, b) { return d3.ascending(a.SRA, b.SRA); })
                           .map(function(d) { return d.SRA; }))
                           .copy();

                         var transition = svg.transition().duration(750),
                         delay = function(d, i) { return i * 50; };
                         transition.selectAll(".bar")
                           .delay(delay)
                           .attr("x", function(d) { return x0(d.SRA); });
                         transition.select(".x.axis")
                           .call(xAxis)
                           .selectAll("text")
                           .style("text-anchor", "start")
                           .selectAll("g")
                           .delay(delay);
                       }

                     });

                     function type(d) {
                      d.hospitalrate = +d.hospitalrate;
                      return d;
                     }

                     }());
 
                #item9.tab-pane
                  //
                    Div that will hold the chart
                  #chart_div9

                    label
                      input(type='checkbox' value='c')
                      |  Sort values

                    #graph-caption
                      |Let's tackle the most affected regions first.  Hover over and select a region for more details.

                    script.
                     (function () {
                     var margin = {top: 20, right: 20, bottom: 30, left: 40},
                     width = 971 - margin.left - margin.right,
                     height = 500 - margin.top - margin.bottom;

                     var x = d3.scale.ordinal()
                       .rangeRoundBands([0, width], .1, 1);

                     var y = d3.scale.linear()
                       .range([height, 0]);

                     var xAxis = d3.svg.axis()
                       .scale(x)
                       .orient("bottom");

                     var yAxis = d3.svg.axis()
                       .scale(y)
                       .orient("left");

                     var tip = d3.tip()
                       .attr('class','d3-tip')
                       .offset([-10,0])
                       .html(function(d) {
                          return "<strong>Total:</strong> <span='color:red'>" + d.edrate + "</span>";
                       })

                     var svg = d3.select("#chart_div9").append("svg")
                       .attr("width", width + margin.left + margin.right)
                       .attr("height", height + margin.top + margin.bottom)
                       .append("g")
                       .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                     svg.call(tip);

                     d3.csv("csv/data.csv", type, function(error, data) {

                       x.domain(data.map(function(d) { return d.SRA; }));
                       y.domain([0, d3.max(data, function(d) { return d.edrate; })]);

                       svg.selectAll(".bar")
                         .data(data)
                         .enter().append("a").attr("xlink:href", function(d){return d.url; })
                         .append("rect")
                         .attr("class", "bar")
                         .style ("fill", function(d) { if (d.url == !{JSON.stringify(name)}) {return "yellow";}})
                         .attr("x", function(d) { return x(d.SRA); })
                         .attr("width", x.rangeBand())
                         .attr("y", function(d) { return y(d.edrate); })
                         .attr("height", function(d) { return height - y(d.edrate); })
                         .on('mouseover', tip.show)
                         .on('mouseout', tip.hide)


                       svg.append("g")
                         .attr("class", "x axis")
                         .attr("transform", "translate(-12," + height + ")")
                         .call(xAxis)
                         .selectAll("text")
                         .style("text-anchor", "start")
                         .attr("transform", function(d) {
                           return "rotate(-90)"})
                         .attr("dx", "5px");

                       svg.append("g")
                         .attr("class", "y axis")
                         .call(yAxis)
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 6)
                         .attr("dy", "10")
                         .style("text-anchor", "end")
                         .text("Rate (per 100,000 of population)");

                       d3.select("input[value=\"c\"]").on("change", change);

                       var sortTimeout = setTimeout(function() {
                         d3.select("input[value=\"c\"]").property("checked", true).each(change);
                       }, 2000);

                       function change() {
                         clearTimeout(sortTimeout);

                         // Copy-on-write since tweens are evaluated after a delay.
                         var x0 = x.domain(data.sort(this.checked
                           ? function(a, b) { return b.edrate - a.edrate; }
                           : function(a, b) { return d3.ascending(a.SRA, b.SRA); })
                           .map(function(d) { return d.SRA; }))
                           .copy();

                         var transition = svg.transition().duration(750),
                         delay = function(d, i) { return i * 50; };
                         transition.selectAll(".bar")
                           .delay(delay)
                           .attr("x", function(d) { return x0(d.SRA); });
                         transition.select(".x.axis")
                           .call(xAxis)
                           .selectAll("text")
                           .style("text-anchor", "start")
                           .selectAll("g")
                           .delay(delay);
                       }

                     });

                     function type(d) {
                      d.edrate = +d.edrate;
                      return d;
                     }

                     }());

        .row-fluid
          .span10.offset1
            h2 What's making #{title} unhealthy
            #tooltip
            ul.nav.nav-tabs
              li
                a(href='#item1', data-toggle='tab') Deaths
              li
                a(href='#item2', data-toggle='tab') Hospitalizations
              li
                a(href='#item3', data-toggle='tab') Emergency
            .tab-content
              #item1.tab-pane.active
                //
                  Div that will hold the chart
                #chart_div
                  #graph-caption
                     |&nbsp &nbsp &nbsp Let's tackle the highest contributors first.  Hover over a section for more details.
                  script.
                    (function() {
                      var dispatch = d3.dispatch("load", "statechange");
                      var groups = [
                        "d-cancer",
                        "d-heartdisease",
                        "d-stroke",
                        "d-asthma",
                        "d-pulminarydisease",
                        "d-diabetes"
                      ];
                      d3.csv("csv/data.csv", type, function(error, states) {
                      if (error) throw error;
                      var stateById = d3.map();
                      states.forEach(function(d) { stateById.set(d.SRA, d); });
                      dispatch.load(stateById);
                      dispatch.statechange(stateById.get(!{JSON.stringify(title)}));
                    });

                    // A drop-down menu for selecting a state; uses the "menu" namespace.
                    dispatch.on("load.menu", function(stateById) {
                    
                      var select = d3.select("#chart_div")
                        .append("div")
                        .append("select")
                        .on("change", function() { dispatch.statechange(stateById.get(this.value)); });
                    
                      select.selectAll("option")
                        .data(stateById.values())
                        .enter().append("option")
                        .attr("value", function(d) { return d.SRA; })
                        .text(function(d) { return d.SRA; });
                    
                      dispatch.on("statechange.menu", function(state) {
                      select.property("value", state.SRA);
                    });
                    });

                    // A bar chart to show total population; uses the "bar" namespace.
                    dispatch.on("load.bar", function(stateById) {
                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                    width = 80 - margin.left - margin.right,
                    height = 460 - margin.top - margin.bottom;
       
                    var y = d3.scale.linear()
                      .domain([0, d3.max(stateById.values(), function(d) { return d.total; })])
                      .rangeRound([height, 0])
                      .nice()

                    var yAxis = d3.svg.axis()
                      .scale(y)
                      .orient("left")
                      .tickFormat(d3.format(".2s"));
                    
                    var svg = d3.select("#chart_div").append("svg")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                    
                    svg.append("g")
                      .attr("class", "y axis")
                      .call(yAxis);
                    
                    var rect = svg.append("rect")
                      .attr("x", 4)
                      .attr("width", width - 4)
                      .attr("y", height)
                      .attr("height", 0)
                      .style("fill", "#aaa");

                    dispatch.on("statechange.bar", function(d) {
                      rect.transition()
                        .attr("y", y(d.total))
                        .attr("height", y(0) - y(d.total));
                    });
                    });
                    
                    // A pie chart to show population by age group; uses the "pie" namespace.
                    dispatch.on("load.pie", function(stateById) {
                    var width = 880,
                    height = 460,
                    radius = Math.min(width, height) / 2;

                    var color = d3.scale.ordinal()
                      .domain(groups)
                      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#ff8c00"]);
                    
                    var arc = d3.svg.arc()
                      .outerRadius(radius - 10)
                      .innerRadius(radius - 70);
                    var pie = d3.layout.pie()
                      .sort(null);

                    var svg = d3.select("#chart_div").append("svg")
                      .attr("width", width)
                      .attr("height", height)
                      .append("g")
                      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                    var labels = ["Cancer","Heart Disease", "Stroke", "Asthma", "Pulminary Disease", "Diabetes"];

                    var path = svg.selectAll("path")
                      .data(groups)
                      .enter().append("path")
                      .attr("d",arc)
                      .style("fill", color)
                      .attr("id", function(d,i){return "s"+i;})
                      .each(function() { this._current = {startAngle: 0, endAngle: 0}; })
                      .on('mouseover', function (d, i) {
                      $("#tooltip")
                          .html(labels[i] + " accounts for "+ Math.round(100*(this._current.endAngle - this._current.startAngle)/(2*Math.PI)) + "% of the problem")
                          .stop(true).fadeTo(300, 1);
                      })              
                      .on('mouseout', function (d) {
                      $("#tooltip").fadeOut(1500, 0);
                      });


                    /*var label = svg.selectAll("text")
                      .data(groups)
                      .enter().append("text")
                      .append("textPath")
                      .attr("xlink:href",function(d,i){return "#s"+i;})
                      .text(function(d, i){
                        return labels[i];
                      })*/

                    dispatch.on("statechange.pie", function(d) {
                    path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
                    .attrTween("d", function(d) {
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                    return arc(interpolate(t));
                    };
                    });
                    });
                    });
                    // Coerce population counts to numbers and compute total per state.
                    function type(d) {
                    d.total = d3.sum(groups, function(k) { return d[k] = +d[k]; });
                    return d;
                    }


                    }());




              #item2.tab-pane
                //
                  Div that will hold the chart
                #chart_div2
                  #graph-caption
                     |&nbsp &nbsp &nbsp Let's tackle the highest contributors first.  Hover over a section for more details.
                  script.
                    (function() {
                      var dispatch = d3.dispatch("load", "statechange");
                      var groups = [
                        "h-heartdisease",
                        "h-stroke",
                        "h-asthma",
                        "h-pulminarydisease",
                        "h-diabetes"
                      ];
                      d3.csv("csv/data.csv", type, function(error, states) {
                      if (error) throw error;
                      var stateById = d3.map();
                      states.forEach(function(d) { stateById.set(d.SRA, d); });
                      dispatch.load(stateById);
                      dispatch.statechange(stateById.get(!{JSON.stringify(title)}));
                    });

                    // A drop-down menu for selecting a state; uses the "menu" namespace.
                    dispatch.on("load.menu", function(stateById) {

                      var select = d3.select("#chart_div2")
                        .append("div")
                        .append("select")
                        .on("change", function() { dispatch.statechange(stateById.get(this.value)); });

                      select.selectAll("option")
                        .data(stateById.values())
                        .enter().append("option")
                        .attr("value", function(d) { return d.SRA; })
                        .text(function(d) { return d.SRA; });

                      dispatch.on("statechange.menu", function(state) {
                      select.property("value", state.SRA);
                    });
                    });

                    // A bar chart to show total population; uses the "bar" namespace.
                    dispatch.on("load.bar", function(stateById) {
                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                    width = 80 - margin.left - margin.right,
                    height = 460 - margin.top - margin.bottom;

                    var y = d3.scale.linear()
                      .domain([0, d3.max(stateById.values(), function(d) { return d.total; })])
                      .rangeRound([height, 0])
                      .nice()

                    var yAxis = d3.svg.axis()
                      .scale(y)
                      .orient("left")
                      .tickFormat(d3.format(".2s"));

                    var svg = d3.select("#chart_div2").append("svg")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    svg.append("g")
                      .attr("class", "y axis")
                      .call(yAxis);

                    var rect = svg.append("rect")
                      .attr("x", 4)
                      .attr("width", width - 4)
                      .attr("y", height)
                      .attr("height", 0)
                      .style("fill", "#aaa");

                    dispatch.on("statechange.bar", function(d) {
                      rect.transition()
                        .attr("y", y(d.total))
                        .attr("height", y(0) - y(d.total));
                    });
                    });

                    // A pie chart to show population by age group; uses the "pie" namespace.
                    dispatch.on("load.pie", function(stateById) {
                    var width = 880,
                    height = 460,
                    radius = Math.min(width, height) / 2;

                    var color = d3.scale.ordinal()
                      .domain(groups)
                      .range(["#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#ff8c00"]);

                    var arc = d3.svg.arc()
                      .outerRadius(radius - 10)
                      .innerRadius(radius - 70);
                    var pie = d3.layout.pie()
                      .sort(null);

                    var svg = d3.select("#chart_div2").append("svg")
                      .attr("width", width)
                      .attr("height", height)
                      .append("g")
                      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                    var labels = ["Heart Disease", "Stroke", "Asthma", "Pulminary Disease", "Diabetes"];

                    var path = svg.selectAll("path")
                      .data(groups)
                      .enter().append("path")
                      .attr("d",arc)
                      .style("fill", color)
                      .attr("id", function(d,i){return "s"+i;})
                      .each(function() { this._current = {startAngle: 0, endAngle: 0}; })
                      .on('mouseover', function (d, i) {
                      $("#tooltip")
                          .html(labels[i] + " accounts for "+ Math.round(100*(this._current.endAngle - this._current.startAngle)/(2*Math.PI)) + "% of the problem")
                          .stop(true).fadeTo(300, 1);
                      })
                      .on('mouseout', function (d) {
                      $("#tooltip").fadeOut(1500, 0);
                      });

                    /*var label = svg.selectAll("text")
                      .data(groups)
                      .enter().append("text")
                      .append("textPath")
                      .attr("xlink:href",function(d,i){return "#s"+i;})
                      .text(function(d, i){
                        return labels[i];
                      })*/

                    dispatch.on("statechange.pie", function(d) {
                    path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
                    .attrTween("d", function(d) {
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                    return arc(interpolate(t));
                    };
                    });
                    });
                    });
                    // Coerce population counts to numbers and compute total per state.
                    function type(d) {
                    d.total = d3.sum(groups, function(k) { return d[k] = +d[k]; });
                    return d;
                    }

                    }());



              #item3.tab-pane
                //
                  Div that will hold the chart
                #chart_div3
                  #graph-caption
                     |&nbsp &nbsp &nbsp Let's tackle the highest contributors first.  Hover over a section for more details.
                  script.
                    (function() {
                      var dispatch = d3.dispatch("load", "statechange");
                      var groups = [
                        "e-heartdisease",
                        "e-stroke",
                        "e-asthma",
                        "e-pulminarydisease",
                        "e-diabetes"
                      ];
                      d3.csv("csv/data.csv", type, function(error, states) {
                      if (error) throw error;
                      var stateById = d3.map();
                      states.forEach(function(d) { stateById.set(d.SRA, d); });
                      dispatch.load(stateById);
                      dispatch.statechange(stateById.get(!{JSON.stringify(title)}));
                    });

                    // A drop-down menu for selecting a state; uses the "menu" namespace.
                    dispatch.on("load.menu", function(stateById) {

                      var select = d3.select("#chart_div3")
                        .append("div")
                        .append("select")
                        .on("change", function() { dispatch.statechange(stateById.get(this.value)); });

                      select.selectAll("option")
                        .data(stateById.values())
                        .enter().append("option")
                        .attr("value", function(d) { return d.SRA; })
                        .text(function(d) { return d.SRA; });

                      dispatch.on("statechange.menu", function(state) {
                      select.property("value", state.SRA);
                    });
                    });

                    // A bar chart to show total population; uses the "bar" namespace.
                    dispatch.on("load.bar", function(stateById) {
                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                    width = 80 - margin.left - margin.right,
                    height = 460 - margin.top - margin.bottom;

                    var y = d3.scale.linear()
                      .domain([0, d3.max(stateById.values(), function(d) { return d.total; })])
                      .rangeRound([height, 0])
                      .nice()

                    var yAxis = d3.svg.axis()
                      .scale(y)
                      .orient("left")
                      .tickFormat(d3.format(".2s"));

                    var svg = d3.select("#chart_div3").append("svg")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    svg.append("g")
                      .attr("class", "y axis")
                      .call(yAxis);

                    var rect = svg.append("rect")
                      .attr("x", 4)
                      .attr("width", width - 4)
                      .attr("y", height)
                      .attr("height", 0)
                      .style("fill", "#aaa");

                    dispatch.on("statechange.bar", function(d) {
                      rect.transition()
                        .attr("y", y(d.total))
                        .attr("height", y(0) - y(d.total));
                    });
                    });

                    // A pie chart to show population by age group; uses the "pie" namespace.
                    dispatch.on("load.pie", function(stateById) {
                    var width = 880,
                    height = 460,
                    radius = Math.min(width, height) / 2;

                    var color = d3.scale.ordinal()
                      .domain(groups)
                      .range(["#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#ff8c00"]);

                    var arc = d3.svg.arc()
                      .outerRadius(radius - 10)
                      .innerRadius(radius - 70);
                    var pie = d3.layout.pie()
                      .sort(null);

                    var svg = d3.select("#chart_div3").append("svg")
                      .attr("width", width)
                      .attr("height", height)
                      .append("g")
                      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                    var labels = ["Heart Disease", "Stroke", "Asthma", "Pulminary Disease", "Diabetes"];

                    var path = svg.selectAll("path")
                      .data(groups)
                      .enter().append("path")
                      .attr("d",arc)
                      .style("fill", color)
                      .attr("id", function(d,i){return "s"+i;})
                      .each(function() { this._current = {startAngle: 0, endAngle: 0}; })
                      .on('mouseover', function (d, i) {
                      $("#tooltip")
                          .html(labels[i] + " accounts for "+ Math.round(100*(this._current.endAngle - this._current.startAngle)/(2*Math.PI)) + "% of the problem")
                          .stop(true).fadeTo(300, 1);
                      })
                      .on('mouseout', function (d) {
                      $("#tooltip").fadeOut(1500, 0);
                      });

                    /*var label = svg.selectAll("text")
                      .data(groups)
                      .enter().append("text")
                      .append("textPath")
                      .attr("xlink:href",function(d,i){return "#s"+i;})
                      .text(function(d, i){
                        return labels[i];
                      })*/

                    dispatch.on("statechange.pie", function(d) {
                    path.data(pie.value(function(g) { return d[g]; })(groups)).transition()
                    .attrTween("d", function(d) {
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function(t) {
                    return arc(interpolate(t));
                    };
                    });
                    });
                    });
                    // Coerce population counts to numbers and compute total per state.
                    function type(d) {
                    d.total = d3.sum(groups, function(k) { return d[k] = +d[k]; });
                    return d;
                    }


                    }());



        p.caption
          | 2011 contributors to 3-4-50% in percentages
        .row-fluid
          .span12
            .span10.offset1
              h2 Where we can make changes in #{title}
              
              h5 Let's analyze by selecting map layers in the top right corner and clicking a region for further info

              ul.nav.nav-tabs
                li
                  a(href='#map1', data-toggle='tab') Deaths
                li
                  a(href='#map2', data-toggle='tab') Hospitalizations
                li
                  a(href='#map3', data-toggle='tab') Emergency
              .tab-content

                #map1.tab-pane.active
                  //
                    Div that will hold the map

                  #map_div1
                    include includes/mapdata.jade

                    include includes/maproute.jade

                    script.

                      (function() {

                        var dheartdiseaseArr = [];
                        for (var i=0; i<42; i++)
                        {
                          dheartdiseaseArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].dheartdisease) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].dheartdisease + "</h1> Heart Disease Deathrate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var dheartdiseaseLayer=L.layerGroup(dheartdiseaseArr);

                        var dstrokeArr = [];
                        for (var i=0; i<42; i++)
                        {
                          dstrokeArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].dstroke) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].dstroke + "</h1> Stroke Death Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var dstrokeLayer=L.layerGroup(dstrokeArr);

                        var dasthmaArr = [];
                        for (var i=0; i<42; i++)
                        {
                          dasthmaArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].dasthma) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].dasthma + "</h1> Asthma Death Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var dasthmaLayer=L.layerGroup(dasthmaArr);

                        var dpulminarydiseaseArr = [];
                        for (var i=0; i<42; i++)
                        {
                          dpulminarydiseaseArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].dpulminarydisease) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].dpulminarydisease + "</h1> Pulminary Disease Death Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var dpulminarydiseaseLayer=L.layerGroup(dpulminarydiseaseArr);

                        var ddiabetesArr = [];
                        for (var i=0; i<42; i++)
                        {
                          ddiabetesArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].ddiabetes) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].ddiabetes + "</h1> Diabetes Death Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var ddiabetesLayer=L.layerGroup(ddiabetesArr);

                        var dcancerArr = [];
                        for (var i=0; i<42; i++)
                        {
                          dcancerArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].dcancer) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].dcancer + "</h1> Cancer Death Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var dcancerLayer=L.layerGroup(dcancerArr);	



                        var deathMap = L.map('map_div1',{
                          center: new L.LatLng(32.95,-116.9),
                          zoom: 9,
                          layers: [dheartdiseaseLayer, exerciseLayer]
                        });

                        var mapLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                          attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
                        }).addTo(deathMap);

                        var baseMaps = {
                          "Heart Disease Death Rate per 100,000 of population (2011)": dheartdiseaseLayer,
                          "Stroke Death Rate per 100,000 of population (2011)": dstrokeLayer,
                          "Asthma Death Rate per 100,000 of population (2011)": dasthmaLayer,
                          "Pulminary Disease Death Rate per 100,000 of population (2011)": dpulminarydiseaseLayer,
                          "Diabetes Death Rate per 100,000 of population (2011)": ddiabetesLayer,
                          "Cancer Death Rate per 100,000 of population (2011)": dcancerLayer

                        };
                        var overlayMaps = {
                          "Exercise at Home 2+Times per Week, Ages 18+ (2013)": exerciseLayer,
                          "Presently Controlling Diet, Ages 18+ (2013)": dietLayer,
                          "Current Smokers, Ages 18+ (2011)": smokeLayer,
                          "Overweight, Ages 18+ (2011)": overweightLayer,
                          "Ate Fast Food 3+ Times per Week, All Ages (2011)": fastfoodLayer,
                          "Eats 5+ Servings of Fruits & Vegetables, Ages 2-11 (2011)": fruitsLayer,
                          "Physically Active >=1hr, 5+ Days per Week, Ages 5-11 (2011)": activeLayer,
                          "Below Federal Poverty Level (2011)": povertyLayer,
                          "Population with a Bachelor's Degree or Higher (2011)": degreeLayer,
                          "Total Population (2011)": populationLayer,
                          "Total Median Household Income (2011)": incomeLayer

                        };

                        L.control.layers(baseMaps, overlayMaps).addTo(deathMap);

                        for (var i=0; i<42; i++){
                          if (stats[i].SRA == !{JSON.stringify(name)}){ 
                            var marker = L.marker([stats[i].lat, stats[i].long]).addTo(deathMap);
                          }
                        }
                       setInterval(function(){ deathMap.invalidateSize()}, 400);

                      }());

                #map2.tab-pane
                  //
                    Div that will hold the chart
                  #map_div2

                    include includes/mapdata.jade

                    include includes/maproute.jade


                    script.
                      (function() {

                        var hheartdiseaseArr = [];
                        for (var i=0; i<42; i++)
                        {
                          hheartdiseaseArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].hheartdisease) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].hheartdisease + "</h1> Heart Disease Hospital Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var hheartdiseaseLayer=L.layerGroup(hheartdiseaseArr);

                        var hstrokeArr = [];
                        for (var i=0; i<42; i++)
                        {
                          hstrokeArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].hstroke) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].hstroke + "</h1> Stroke Hospital Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var hstrokeLayer=L.layerGroup(hstrokeArr);

                        var hasthmaArr = [];
                        for (var i=0; i<42; i++)
                        {
                          hasthmaArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].hasthma) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].hasthma + "</h1> Asthma Hospital Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var hasthmaLayer=L.layerGroup(hasthmaArr);

                        var hpulminarydiseaseArr = [];
                        for (var i=0; i<42; i++)
                        {
                          hpulminarydiseaseArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].hpulminarydisease) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].hpulminarydisease + "</h1> Pulminary Disease Hospital Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var hpulminarydiseaseLayer=L.layerGroup(hpulminarydiseaseArr);

                        var hdiabetesArr = [];
                        for (var i=0; i<42; i++)
                        {
                          hdiabetesArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].hdiabetes) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].hdiabetes + "</h1> Diabetes Hospital Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var hdiabetesLayer=L.layerGroup(hdiabetesArr);

                        var hospMap = L.map('map_div2',{
                          center: new L.LatLng(32.95,-116.9),
                          zoom: 9,
                          layers: [hheartdiseaseLayer, exerciseLayer]
                        });

                        var mapLayer2 = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                          attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
                        }).addTo(hospMap);

                        var baseMaps2 = {
                          "Heart Disease Hospital Visit Rate per 100,000 of population (2011)": hheartdiseaseLayer,
                          "Stroke Hospital Visit Rate per 100,000 of population (2011)": hstrokeLayer,
                          "Asthma Hospital Visit Rate per 100,000 of population (2011)": hasthmaLayer,
                          "Pulminary Disease Hospital Visit Rate per 100,000 of population (2011)": hpulminarydiseaseLayer,
                          "Diabetes Hospital Visit Rate per 100,000 of population (2011)": hdiabetesLayer

                        };
                        var overlayMaps2 = {
                          "Exercise at Home 2+Times per Week, Ages 18+ (2013)": exerciseLayer,
                          "Presently Controlling Diet, Ages 18+ (2013)": dietLayer,
                          "Current Smokers, Ages 18+ (2011)": smokeLayer,
                          "Overweight, Ages 18+ (2011)": overweightLayer,
                          "Ate Fast Food 3+ Times per Week, All Ages (2011)": fastfoodLayer,
                          "Eats 5+ Servings of Fruits & Vegetables, Ages 2-11 (2011)": fruitsLayer,
                          "Physically Active >=1hr, 5+ Days per Week, Ages 5-11 (2011)": activeLayer,
                          "Below Federal Poverty Level (2011)": povertyLayer,
                          "Population with a Bachelor's Degree or Higher (2011)": degreeLayer,
                          "Total Population with (2011)": populationLayer,
                          "Total Median Household Income (2011)": incomeLayer

                        };

                        L.control.layers(baseMaps2, overlayMaps2).addTo(hospMap);

                        for (var i=0; i<42; i++){
                          if (stats[i].SRA == !{JSON.stringify(name)}){
                            var marker = L.marker([stats[i].lat, stats[i].long]).addTo(hospMap);
                          }
                        }
                       setInterval(function(){ hospMap.invalidateSize()}, 400);

                      }());


                #map3.tab-pane
                  //
                    Div that will hold the chart
                  #map_div3

                    include includes/mapdata.jade

                    include includes/maproute.jade

                    script.
                      (function() {

                        var eheartdiseaseArr = [];
                        for (var i=0; i<42; i++)
                        {
                          eheartdiseaseArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].eheartdisease) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].eheartdisease + "</h1> Heart Disease Emergency Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var eheartdiseaseLayer=L.layerGroup(eheartdiseaseArr);

                        var estrokeArr = [];
                        for (var i=0; i<42; i++)
                        {
                          estrokeArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].estroke) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].estroke + "</h1> Stroke Emergency Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var estrokeLayer=L.layerGroup(estrokeArr);

                        var easthmaArr = [];
                        for (var i=0; i<42; i++)
                        {
                          easthmaArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].easthma) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].easthma + "</h1> Asthma Emergency Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var easthmaLayer=L.layerGroup(easthmaArr);

                        var epulminarydiseaseArr = [];
                        for (var i=0; i<42; i++)
                        {
                          epulminarydiseaseArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].epulminarydisease) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].epulminarydisease + "</h1> Pulminary Disease Emergency Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var epulminarydiseaseLayer=L.layerGroup(epulminarydiseaseArr);

                        var ediabetesArr = [];
                        for (var i=0; i<42; i++)
                        {
                          ediabetesArr.push(L.circle([stats[i].lat, stats[i].long], conditionVisualize(stats[i].ediabetes) , {
                            color: 'orange',
                            fillColor: 'orange',
                            fillOpacity: 0.3 })
                            .bindPopup("<h1>" + stats[i].ediabetes + "</h1> Diabetes Emergency Visit Rate <br> per 100,000 of population in " + stats[i].title ));

                        }
                        var ediabetesLayer=L.layerGroup(ediabetesArr);

                        var emergMap = L.map('map_div3',{
                          center: new L.LatLng(32.95,-116.9),
                          zoom: 9,
                          layers: [eheartdiseaseLayer, exerciseLayer]
                        });

                        var mapLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                          attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
                        }).addTo(emergMap);

                        var baseMaps = {
                          "Heart Disease Emergency Visit Rate per 100,000 of population (2011)": eheartdiseaseLayer,
                          "Stroke Emergency Visit Rate per 100,000 of population (2011)": estrokeLayer,
                          "Asthma Emergency Visit Rate per 100,000 of population (2011)": easthmaLayer,
                          "Pulminary Disease Emergency Visit Rate per 100,000 of population (2011)": epulminarydiseaseLayer,
                          "Diabetes Emergency Visit Rate per 100,000 of population (2011)": ediabetesLayer

                        };
                        var overlayMaps = {
                          "Exercise at Home 2+Times per Week, Ages 18+ (2013)": exerciseLayer,
                          "Presently Controlling Diet, Ages 18+ (2013)": dietLayer,
                          "Current Smokers, Ages 18+ (2011)": smokeLayer,
                          "Overweight, Ages 18+ (2011)": overweightLayer,
                          "Ate Fast Food 3+ Times per Week, All Ages (2011)": fastfoodLayer,
                          "Eats 5+ Servings of Fruits & Vegetables, Ages 2-11 (2011)": fruitsLayer,
                          "Physically Active >=1hr, 5+ Days per Week, Ages 5-11 (2011)": activeLayer,
                          "Below Federal Poverty Level (2011)": povertyLayer,
                          "Population with a Bachelor's Degree or Higher (2011)": degreeLayer,
                          "Total Population with (2011)": populationLayer,
                          "Total Median Household Income (2011)": incomeLayer

                        };

                        L.control.layers(baseMaps, overlayMaps).addTo(emergMap);

                        for (var i=0; i<42; i++){
                          if (stats[i].SRA == !{JSON.stringify(name)}){
                            var marker = L.marker([stats[i].lat, stats[i].long]).addTo(emergMap);
                          }
                        }

                       setInterval(function(){ emergMap.invalidateSize()}, 400);

                      }());


        .row-fluid
          .span12
            .span10.offset1
              h2 How #{title} has been doing
              ul.nav.nav-tabs
                li
                  a(href='#item4', data-toggle='tab') Deaths
                li
                  a(href='#item5', data-toggle='tab') Hospitalizations
                li
                  a(href='#item6', data-toggle='tab') Emergency
              .tab-content
                #item4.tab-pane.active
                  //
                    Div that will hold the chart
                  #chart_div4
                    script.
                      (function() {
                      var margin = {top: 20, right: 200, bottom: 30, left: 50},
                        width = 960 - margin.left - margin.right,
                        height = 500 - margin.top - margin.bottom;

                      var parseDate = d3.time.format("%Y").parse;

                      var x = d3.time.scale()
                        .range([0, width]);

                      var y = d3.scale.linear()
                        .range([height, 0]);

                      var color = d3.scale.category10();

                      var xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("bottom")
                        .tickFormat(d3.time.format("%b%y"));

                      var yAxis = d3.svg.axis()
                        .scale(y)
                        .orient("left");

                      var line = d3.svg.line()
                        .interpolate("basis")
                        .x(function(d) { return x(d.date); })
                        .y(function(d) { return y(d.rate); });

                      var svg = d3.select("#chart_div4").append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                       .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                      var region =!{JSON.stringify(name)}

                      d3.csv("csv/dtrend.csv", function(error, data) {
                        color.domain(d3.keys(data[0]).filter(function(key) { 
                        return key == "H" + region || key == "S" + region || key == "A" + region || key == "P" + region || key == "D" + region || key == "C" + region; 
                        }));

                        data.forEach(function(d) {
                          d.date = parseDate(d.date);
                        });

                        var cities = color.domain().map(function(name) {
                          return {
                            name: name,
                            values: data.map(function(d) {
                            return {date: d.date, rate: +d[name]};
                          })
                        };
                        });

                        x.domain(d3.extent(data, function(d) { return d.date; }));

                        y.domain([
                          d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.rate; }); }),
                          d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.rate; }); })
                        ]);

                        svg.append("g")
                          .attr("class", "x axis")
                          .attr("transform", "translate(0," + height + ")")
                          .call(xAxis);

                        svg.append("g")
                          .attr("class", "y axis")
                         .call(yAxis)
                        .append("text")
                          .attr("transform", "rotate(-90)")
                          .attr("y", 6)
                          .attr("dy", ".71em")
                          .style("text-anchor", "end")
                          .text("Rate (per 100,000 of population)");

                        var city = svg.selectAll(".city")
                          .data(cities)
                        .enter().append("g")
                          .attr("class", "city");

                        city.append("path")
                          .attr("class", "line")
                          .attr("d", function(d) { return line(d.values); })
                          .style("stroke", function(d) { return color(d.name); });

                        city.append("text")
                          .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
                          .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.rate) + ")"; })
                          .attr("x", 3)
                          .attr("dy", ".35em")
                          .text(function(d) { 
                            if (d.name=="H"+region){return "Heart Disease";}
                            else if (d.name=="S"+region){return "Stroke";}
                            else if (d.name=="A"+region){return "Asthma";}
                            else if (d.name=="P"+region){return "Pulminary Disease";}
                            else if (d.name=="D"+region){return "Diabetes";} 
                            else if (d.name=="C"+region){return "Cancer";}

                          });
                      });

                      }());    


                #item5.tab-pane
                  //
                    Div that will hold the chart
                  #chart_div5

                    script.

                      (function() {
                      var margin = {top: 20, right: 200, bottom: 30, left: 50},
                        width = 960 - margin.left - margin.right,
                        height = 500 - margin.top - margin.bottom;

                      var parseDate = d3.time.format("%Y").parse;

                      var x = d3.time.scale()
                        .range([0, width]);

                      var y = d3.scale.linear()
                        .range([height, 0]);

                      var color = d3.scale.category10();

                      var xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("bottom")
                        .tickFormat(d3.time.format("%b%y"));

                      var yAxis = d3.svg.axis()
                        .scale(y)
                        .orient("left");

                      var line = d3.svg.line()
                        .interpolate("basis")
                        .x(function(d) { return x(d.date); })
                        .y(function(d) { return y(d.rate); });

                      var svg = d3.select("#chart_div5").append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                       .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                      var region =!{JSON.stringify(name)}


                      d3.csv("csv/htrend.csv", function(error, data) {
                        color.domain(d3.keys(data[0]).filter(function(key) {
                        return key == "H" + region || key == "S" + region || key == "A" + region || key == "P" + region || key == "D" + region;
                        }));

                        data.forEach(function(d) {
                          d.date = parseDate(d.date);
                        });

                        var cities = color.domain().map(function(name) {
                          return {
                            name: name,
                            values: data.map(function(d) {
                              return {date: d.date, rate: +d[name]};
                            })
                          };
                        });

                        x.domain(d3.extent(data, function(d) { return d.date; }));

                        y.domain([
                          d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.rate; }); }),
                          d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.rate; }); })
                        ]);

                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + height + ")")
                            .call(xAxis);

                        svg.append("g")
                          .attr("class", "y axis")
                         .call(yAxis)
                         .append("text")
                          .attr("transform", "rotate(-90)")
                          .attr("y", 6)
                          .attr("dy", ".71em")
                          .style("text-anchor", "end")
                          .text("Rate (per 100,000 of population)");


                        var city = svg.selectAll(".city")
                          .data(cities)
                         .enter().append("g")
                          .attr("class", "city");

                        city.append("path")
                          .attr("class", "line")
                          .attr("d", function(d) { return line(d.values); })
                          .style("stroke", function(d) { return color(d.name); });

                        city.append("text")
                          .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
                          .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.rate) + ")"; })
                          .attr("x", 3)
                          .attr("dy", ".35em")
                          .text(function(d) {
                            if (d.name=="H"+region){return "Heart Disease";}
                            else if (d.name=="S"+region){return "Stroke";}
                            else if (d.name=="A"+region){return "Asthma";}
                            else if (d.name=="P"+region){return "Pulminary Disease";}
                            else if (d.name=="D"+region){return "Diabetes";}
                          });
                      });

                      }());
 


                #item6.tab-pane
                  //
                    Div that will hold the chart
                  #chart_div6
                    script.

                     (function() {
                      var margin = {top: 20, right: 200, bottom: 30, left: 50},
                        width = 960 - margin.left - margin.right,
                        height = 500 - margin.top - margin.bottom;

                      var parseDate = d3.time.format("%Y").parse;

                      var x = d3.time.scale()
                        .range([0, width]);

                      var y = d3.scale.linear()
                        .range([height, 0]);

                      var color = d3.scale.category10();

                      var xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("bottom")
                        .tickFormat(d3.time.format("%b%y"));

                      var yAxis = d3.svg.axis()
                        .scale(y)
                        .orient("left");

                      var line = d3.svg.line()
                        .interpolate("basis")
                        .x(function(d) { return x(d.date); })
                        .y(function(d) { return y(d.rate); });

                      var svg = d3.select("#chart_div6").append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                      var region =!{JSON.stringify(name)}


                      d3.csv("csv/etrend.csv", function(error, data) {
                        color.domain(d3.keys(data[0]).filter(function(key) {
                        return key == "H" + region || key == "S" + region || key == "A" + region || key == "P" + region || key == "D" + region;
                        }));

                        data.forEach(function(d) {
                          d.date = parseDate(d.date);
                        });

                        var cities = color.domain().map(function(name) {
                          return {
                          name: name,
                          values: data.map(function(d) {
                            return {date: d.date, rate: +d[name]};
                          })
                        };
                        });

                        x.domain(d3.extent(data, function(d) { return d.date; }));

                        y.domain([
                          d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.rate; }); }),
                          d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.rate; }); })
                        ]);

                        svg.append("g")
                          .attr("class", "x axis")
                          .attr("transform", "translate(0," + height + ")")
                          .call(xAxis);

                        svg.append("g")
                          .attr("class", "y axis")
                         .call(yAxis)
                        .append("text")
                          .attr("transform", "rotate(-90)")
                          .attr("y", 6)
                          .attr("dy", ".71em")
                          .style("text-anchor", "end")
                          .text("Rate (per 100,000 of population)");


                        var city = svg.selectAll(".city")
                          .data(cities)
                        .enter().append("g")
                          .attr("class", "city");

                        city.append("path")
                          .attr("class", "line")
                          .attr("d", function(d) { return line(d.values); })
                          .style("stroke", function(d) { return color(d.name); });

                        city.append("text")
                          .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
                          .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.rate) + ")"; })
                          .attr("x", 3)
                          .attr("dy", ".35em")
                          .text(function(d) {
                            if (d.name=="H"+region){return "Heart Disease";}
                            else if (d.name=="S"+region){return "Stroke";}
                            else if (d.name=="A"+region){return "Asthma";}
                            else if (d.name=="P"+region){return "Pulminary Disease";}
                            else if (d.name=="D"+region){return "Diabetes";}
                          });
                      });

                     }());



        .row-fluid
          .span12
            .span10.offset1
              h2 What you can do
              ul.list-unstyled.list-cta
                li
                  | Get educated
                  ul
                    li
                      | Read more about&nbsp
                      a(href='http://www.cdc.gov/cancer/') cancer
                      |,&nbsp
                      a(href='http://www.cdc.gov/heartdisease/')  heart disease
                      |,&nbsp
                      a(href='http://www.cdc.gov/stroke/')  stroke
                      |,&nbsp
                      a(href='http://www.cdc.gov/asthma/')  asthma
                      |,&nbsp
                      a(href='http://www.cdc.gov/copd/')  pulminary disease
                      |, or
                      a(href='http://www.cdc.gov/diabetes/')  diabetes


                li
                  | Increase your physical activity
                  ul
                    li
                      | Take more 
                      a(href='http://www.sdmts.com/tripplanner.asp') public transportation
                    li
                      | Find a nearby 
                      a(href='http://www.co.san-diego.ca.us/parks/') park&nbsp
                      | or 
                      a(href='http://www.yelp.com/search?find_desc=gyms&find_loc=san+diego&ns=1&ls=adfdf5ce4e07b889') gym
                    li
                      | Join a 
                      a(href='http://www.meetup.com/find/events/fitness/?allMeetups=false&radius=50&userFreeform=san+dieg&mcId=c92101&eventFilter=mysugg') physical activity group on Meetup.com
                li
                  | Improve your diet
                  ul
                    li
                      | Look up your closest&nbsp
                      a(href='http://www.yelp.com/search?cflt=grocery&find_loc=San+Diego%2C+CA') supermarket&nbsp
                      | or&nbsp
                      a(href='http://sdfarmbureau.org/BuyLocal/Farmers-Markets.php') farmer's market
                //
                  insert sponsored logos here
                li
                  | Become an activist
                  ul
                    li 
                      a(href='http://sdpublic.sdcounty.ca.gov/') Petition your local representative to support more healthy initiatives

